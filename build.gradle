allprojects {
    apply plugin: 'java'
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    repositories {
        mavenCentral()
    }
    javadoc {
        options.links 'https://docs.oracle.com/javase/8/docs/api/'
        // TODO: change when https://github.com/gradle/gradle/issues/2354 is fixed
        options.addStringOption 'Xdoclint:all', '-Xdoclint:-missing'
        options.memberLevel = JavadocMemberLevel.PUBLIC
    }
    task packageJavadoc(type: Jar, dependsOn: 'javadoc') {
        from javadoc.destinationDir
        classifier = 'javadoc'
    }
    task packageSources(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
    artifacts {
        archives packageJavadoc, packageSources
    }
}

project(':driver') {
    apply plugin: 'maven'
    apply plugin: 'signing'

    group 'com.github.cretz.pgnio'
    archivesBaseName = 'pgnio-driver'
    version '0.1.0'

    dependencies {
        testCompile 'junit:junit:4.12'
        testCompile 'org.postgresql:postgresql:42.2.1'
        testCompile 'ru.yandex.qatools.embed:postgresql-embedded:2.8'
        testCompile 'org.slf4j:slf4j-log4j12:1.7.10'
    }

    test {
        systemProperty 'java.util.logging.config.file', 'src/test/resources/logging.properties'
        systemProperty 'pgnio.postgres.version', System.getProperty('pgnio.postgres.version')
        testLogging {
            outputs.upToDateWhen {false}
            showStandardStreams = true
            exceptionFormat = 'full'
            events 'passed', 'skipped', 'failed'
        }
    }

    // Deployment stuff
    signing {
        sign configurations.archives
    }
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }
                snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }
                pom.project {
                    name 'pgnio-driver'
                    packaging 'jar'
                    description 'Asynchronous PostgreSQL Java Driver using NIO'
                    url 'https://github.com/cretz/pgnio'
                    scm {
                        connection 'scm:git:git@github.com:cretz/pgnio.git'
                        developerConnection 'scm:git:git@github.com:cretz/pgnio.git'
                        url 'git@github.com:cretz/pgnio.git'
                    }
                    licenses {
                        license {
                            name 'MIT License'
                            url 'https://opensource.org/licenses/MIT'
                        }
                    }
                    developers {
                        developer {
                            id 'cretz'
                            name 'Chad Retz'
                            url 'https://github.com/cretz'
                        }
                    }
                }
            }
        }
    }
}

// Checker framework integration
allprojects {
    configurations {
        checkerFrameworkCheckerJar { }
        checkerFrameworkAnnotatedJdk { }
    }

    dependencies {
        checkerFrameworkAnnotatedJdk 'org.checkerframework:jdk8:2.4.0'
        checkerFrameworkCheckerJar 'org.checkerframework:checker:2.4.0'
        compileOnly 'org.checkerframework:checker-qual:2.4.0'
        testCompileOnly 'org.checkerframework:checker-qual:2.4.0'
    }

    compileJava {
        doFirst {
            options.compilerArgs = [
                '-processorpath', configurations.checkerFrameworkCheckerJar.asPath,
                '-processor', 'org.checkerframework.checker.nullness.NullnessChecker',
                '-Xmaxerrs', '10000',
                // Assuming side effect free to prevent multi-field null checks from assuming nullness is changed
                '-AassumeSideEffectFree',
                '-Xbootclasspath/p:' + configurations.checkerFrameworkAnnotatedJdk.asPath
            ]
        }
    }
}